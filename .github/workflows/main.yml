name: cicd-demo
on:
  push:
    branches:
      - 'migrate_to_oracle_cloud'
      - 'master'
jobs:
  build-job:
    name: Build Job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Setup Go'
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'

      - name: Install dependencies
        run: go get .

      - name: 'Build'
        env:
          GOOS: linux
          GOARCH: arm
        run: go build -o scala-bot-app main.go

      - name: 'Copy binary to OCI'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "scala-bot-app"
          target: "build"

      - name: 'Copy static files to OCI'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "webapp/*"
          target: "build"

      - name: 'Stop App'
        continue-on-error: true
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            killall scala-bot-app

      - name: 'Run new App'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script:
            sudo mkdir -p ~/app &&
            sudo cp -r ~/build/* ~/app &&
            cd app &&
            MONGODB_URI='${{ secrets.MONGODB_URI }}'
            MONGODB_DATABASE_NAME='${{ secrets.MONGODB_DATABASE_NAME }}'
            LOG_CHANNEL='${{ secrets.LOG_CHANNEL }}'
            GOOGLEAPIS_CREDENTIALS='${{ secrets.GOOGLEAPIS_CREDENTIALS }}'
            FILES_CHANNEL_ID='${{ secrets.FILES_CHANNEL_ID }}'
            BOT_TOKEN='${{ secrets.BOT_TOKEN }}'
            FILES_CHANNEL_ID='${{ secrets.FILES_CHANNEL_ID }}'
            HOST='http://${{ secrets.VM_SSH_HOST }}:8080'
            ./scala-bot-app

            #      - name: 'Publish JAR'
            #        uses: actions/upload-artifact@v2-preview
            #        with:
            #          name: 'cicd-demo-${{env.VERSION}}-all.jar'
            #          path: build/libs/*-all.jar

            #      - name: 'Write Config & Key Files'
            #        run: |
            #          mkdir ~/.oci
            #          echo "[DEFAULT]" >> ~/.oci/config
            #          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
            #          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
            #          echo "pass_phrase=${{secrets.OCI_PASSPHRASE}}" >> ~/.oci/config
            #          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
            #          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
            #          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
            #          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
            #          echo "${{secrets.VM_SSH_PUB_KEY}}" >> /home/runner/.oci/id_vm.pub

            #      - name: 'Install OCI CLI'
            #        run: |
            #          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
            #          chmod +x install.sh
            #          ./install.sh --accept-all-defaults
            #          echo "/home/runner/bin" >> $GITHUB_PATH
            #          exec -l $SHELL

            #      - name: 'Fix Config File Permissions'
            #        run: |
            #          oci setup repair-file-permissions --file /home/runner/.oci/config
            #          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
            #
            #      - name: 'Check Existing Instance'
            #        run: |
            #          echo "INSTANCE_OCID=$( \
            #            oci compute instance list \
            #            --lifecycle-state RUNNING \
            #            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            #            --display-name scala-bot-app \
            #            --query "data [0].id" \
            #            --raw-output \
            #          )" >> $GITHUB_ENV

            #      - name: 'Create Instance'
            #        if: ${{!env.INSTANCE_OCID}}
            #        run: |
            #          echo "INSTANCE_OCID=$( \
            #            oci compute instance launch \
            #              -c ${{secrets.VM_COMPARTMENT_OCID}} \
            #              --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            #              --shape ${{secrets.VM_SHAPE}} \
            #              --shape-config '{"memoryInGBs": 4, "ocpus": 1}' \
            #              --assign-public-ip true \
            #              --display-name cicd-demo \
            #              --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            #              --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
            #              --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            #              --wait-for-state RUNNING \
            #              --query "data.id" \
            #              --raw-output \
            #          )" >> $GITHUB_ENV

            #      - name: 'Get Instance IP'
            #        run: |
            #          echo "INSTANCE_IP=$( \
            #            oci compute instance list-vnics \
            #            --instance-id ${{env.INSTANCE_OCID}} \
            #            --query 'data [0]."public-ip"' \
          #            --raw-output \
          #          )" >> $GITHUB_ENV
          #          echo Instance IP: ${{ env.INSTANCE_IP }}

          #      - name: 'Wait for SSH'
          #        run: |
          #          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          #                  sleep 5
          #                  echo "SSH not available..."
          #          done; echo "SSH ready!"


#      - name: 'Push JAR'
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{ env.INSTANCE_IP }}
#          username: opc
#          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
#          source: "build/libs/cicd-demo-${{env.VERSION}}-all.jar"
#          target: "app"
#          strip_components: 2
#
#      - name: 'Start App'
#        uses: appleboy/ssh-action@v0.1.4
#        with:
#          host: ${{ env.INSTANCE_IP }}
#          username: opc
#          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
#          script: |
#            sudo mv ~/app/cicd-demo-${{env.VERSION}}-all.jar /app/cicd-demo.jar
#            nohup java -jar /app/cicd-demo.jar > output.$(date --iso).log 2>&1 &
